#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass llncs
\begin_preamble
%\usepackage{color}
%\usepackage{listings}
\usepackage{pdfsync}
\end_preamble
\use_default_options true
\language ngerman
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing onehalf
\use_hyperref true
\pdf_subject "Seminar Computergrafik 2010: Procedural Content Generation"
\pdf_keywords "computer graphic, particle engine, system, GPU, UberFlow"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine natbib_numerical
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
A GPU-Based Particle Engine
\end_layout

\begin_layout Subtitle

\size small
Seminar Computer Grafik: Procedural Content Generation
\begin_inset Newline newline
\end_inset

Sommersemester 2010
\end_layout

\begin_layout Author
Sebastian Rockel
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
email{
\end_layout

\end_inset

8rockel@informatik.uni-hamburg.de
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Institute
Universität Hamburg 
\end_layout

\begin_layout Abstract
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO Dieser Bericht gibt eine Einführung in das Thema Model-Checking und
 führt anhand praktischer Beispiele mit dem Werkzeug SPIN durch den Verifikation
sprozess.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Einführung
\end_layout

\begin_layout Subsection
Partikelsystem
\end_layout

\begin_layout Standard
Partikelsysteme stellen Funktionen zur Verfügung, die eine große Anzahl
 von Objekten animieren können.
 Damit können zum Beispiel im Bereich der Computergrafik physikalische Vorgänge
 (wie Rauch) dargestellt werden.
 Dies wäre mit konventionellen Methoden sehr komplex.
 Mit einem Partikelsystem lässt sich der Gesamtprozess aber aufgrund relative
 einfacher Bewegungsmodell von einzelnen Objekten, eben den Partikeln, modellier
en.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Referenz Flocking systeme
\end_layout

\end_inset

 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig:PartSmoke"

\end_inset

 zeigt ein Rauchdarstellung, die auf dem Bewegungsmodell vieler Partikel
 beruht.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/Particles.jpg
	lyxscale 10
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Rauchpartikel [Wikipedia]
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:PartSmoke"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Details
\end_layout

\begin_layout Standard
Das Bewegungsmodell von Partikeln erlaubt ein Bewegungsmodell für das gesamte
 zusammengesetzte Objekt.
 Darauf basierend eignet sich ein solches System für sogenannte volumetrische
 Effekte.
 Gerade Feuer, Explosionen, Rauch und Flüssigkeiten werden in Animationen
 und auch Computerspielen zunehmend gefordert.
 Dabei kann das sich darunter befindliche physikalische Modell relative
 einfachen Gesetzmäßigkeiten genügen.
\end_layout

\begin_layout Standard
Für anspruchsvolleren Dynamik-Simulationen kann ein Partikelsystem noch
 weitere Anforderungen gestellt werden.
 Zum Einen sollen eventuell auch komplexere physikalische Modelle simuliert
 werden (z.B.
 Fliehkraft oder sogar mehrere Gravitationszentren) und zum Anderen sollen
 Partikel auch unternander und nicht nur mit ihrer Umgebung interagieren.
\end_layout

\begin_layout Standard
Ein Beispiel eines einfacheren aber optisch sehr überzeugenden Partikelsystems
 ist ein in POV-Ray implementiertes von 
\begin_inset CommandInset citation
LatexCommand citep
key "RuneParticleSys"

\end_inset

.
 Abbildungen 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig:POVpart1"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig:POVpart2"

\end_inset

 zeigen Animationsausschnitte fast fotorealischtischen Effekten.
 In diesem System gibt es keine Partikel-zu-Partikel-Interaktion.
 Natürlich hat es auch den Nachteil fehlender Interaktion (keine Echtzeit)
 aufgrund der Implementierung als Ray-Tracer.
 
\begin_inset CommandInset label
LatexCommand label
name "Par:RunePart"

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/flow/flow-poster.jpg
	lyxscale 30
	width 50text%

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/campfire/campfire-poster.jpg
	lyxscale 30
	width 50text%

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Wasserfluss und Feuer 
\begin_inset CommandInset citation
LatexCommand cite
key "RuneParticleSys"

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:POVpart1"

\end_inset


\end_layout

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/hose/hose-poster.jpg
	lyxscale 30
	width 50text%

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/smoketrail/smoketrail-poster.jpg
	lyxscale 30
	width 50text%

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Wasserfontäne und Rauch 
\begin_inset CommandInset citation
LatexCommand cite
key "RuneParticleSys"

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:POVpart2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Partikelparameter
\begin_inset CommandInset label
LatexCommand label
name "sub:Partikelparameter"

\end_inset


\end_layout

\begin_layout Standard
Die Bewegung der Gesamtheit aller Partikel hängt von der Bewegung eines
 einzelnen ab.
 Dazu sind eine Reihe von (einfachen) Partikelparametern zu definieren.
\end_layout

\begin_layout Paragraph*
Emission
\end_layout

\begin_layout Standard
Die 
\begin_inset Quotes gld
\end_inset

Lebensphase
\begin_inset Quotes grd
\end_inset

 eines Partikels beginnt mit seiner Emission.
 Dabei ist eine zunächst konstante Anfangsgeschwindigkeit festgelegt.
 Dieser wirkt in der Regel eine (konstante) Dämpfung entgegen um die Partikelbew
egung über die Zeit zu verringern.
 Eine Lebensdauer legt die Zeit fest, in der sich ein Partikel in der Animation
 befindet.
 Sie wird meist in 
\emph on
Clockzyklen
\emph default
 angegeben.
 Um die Anmation in gewissen Grenzen zu skalieren ist darüber hinaus eine
 maximale Anzahl von Partikeln festgelegt.
\end_layout

\begin_layout Paragraph*
Bewegung
\end_layout

\begin_layout Standard
Das Bewegungsmodell selber hängt von der gewünschten Anwendung der Partikelsyste
ms ab und kann nahezu beliebige (dynamische) Systeme implementieren.
 In 
\begin_inset CommandInset citation
LatexCommand citep
key "Kipfer:2004fk"

\end_inset

 wird zum Beispiel das Euler-Verfahren zur numerischen Integration des newtonsch
en Grundgesetzes der Dynamik verwendet (Gleichung 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:PartVel"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:PartPos"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align}
v(r,t+dt) & =v(r,t)+v_{ext}(r,t)+\frac{F}{m}+dt\label{eq:PartVel}\\
r(t+dt) & =r(t)+\frac{1}{2}\Bigl(v(r,t)+v(r,t+dt)\Bigr)dt\label{eq:PartPos}\end{align}

\end_inset


\end_layout

\begin_layout Standard
\noindent
Diese zwei Gleichungen verwenden die aktuelle Geschwindigkeit 
\begin_inset Formula $v(r,t)$
\end_inset

 und Position 
\begin_inset Formula $r(t)$
\end_inset

 abhängig von der Zeit 
\begin_inset Formula $t$
\end_inset

 um die neuen Partikelparameter zu berechnen.
 
\begin_inset Formula $v_{ext}$
\end_inset

 ist ein externes Windfeld, 
\begin_inset Formula $F$
\end_inset

 ist eine externe Kraft (hier Gravitation) und 
\begin_inset Formula $m$
\end_inset

 ist die Partikelmasse.
 Externe Kräfte werden auch in Abschnitt 
\emph on
Externe Kräfte
\emph default
 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "par:Externe-Kraefte"

\end_inset

 erklärt.
 
\begin_inset Formula $dt$
\end_inset

 bezeichnet das Zeitinterval für eine Berechnung (der Partikelauslenkung).
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{multline*}
\end{multline*}

\end_inset


\end_layout

\begin_layout Paragraph*
Kollision
\end_layout

\begin_layout Standard
Die Kollision eines Partikels wird in getrennt betrachtet in Abhängigkeit
 mit der Umgebung und mit anderen Partikeln.
 Manche Partikelsysteme verzichten komplett auf komplizierte Partikel-zu-Partike
l-Interaktionen (siehe Runes Partikelsystem
\begin_inset CommandInset ref
LatexCommand vpageref
reference "Par:RunePart"

\end_inset

).
\end_layout

\begin_layout Paragraph*
Kollisionsreaktion
\end_layout

\begin_layout Standard
Diese legt fest wie Partikel nach der Kollisionserkennung mit einem Objekte
 reagieren soll.
 Beispielsweise soll ein Wasser- anders reagieren als ein Rauch-Partikel
 oder ein festes Objekt.
\end_layout

\begin_layout Paragraph*
Externe Kräfte
\begin_inset CommandInset label
LatexCommand label
name "par:Externe-Kraefte"

\end_inset


\end_layout

\begin_layout Standard
Je nach Anwendung sind externe Kräfte wie Gravitation oder Wind notwendig.
 Dabei ist jede Art von (berechenbarem) Kräftefeld (oder auch mehrere sich
 beeinflussende) möglicht.
 Die Rechenzeit für die Partikel-Dynamik setzt hier eine Grenze.
\end_layout

\begin_layout Subsection
GPU-Partikelsysteme
\end_layout

\begin_layout Standard
Für Simulationen oder Computerspiele kommt es in der Regel auf die Echtzeitfähig
keit an.
 Regen oder Rauch muss sich realistisch in die Animationssequenz einfügen.
 Einfache Physikmodelle halten die Berechnungskostem im Rahmen.
 Doch um volumetrische Effekte einigermaßen sinnvoll einzusetzten bedarf
 es in der Regel einer sehr großen Anzahl von Partikeln von einigen 1000
 bis dem Tausendfachen, je nach Anwendung.
 Solche Massen an Berechnungen könne von der CPU nicht mehr schnell genug
 berechnet werden (und dann nebenbei noch andere Funktionen zu berechnen).
\end_layout

\begin_layout Standard
Grafikarten (GPUs) bieten heute durch ihre massive Anzahl von parrallelen
 Recheneinheiten die Möglichkeit viele Berechnungen gleichzeitig auszuführen.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
NAme: SIMD?
\end_layout

\end_inset

 Es folgt eine kurze Liste, mit Überblickscharakter, möglicher (populärer)
 GPU-Schnittstellen:
\end_layout

\begin_layout Itemize
CUDA (NVIDIA)
\end_layout

\begin_layout Itemize
OpenGL
\end_layout

\begin_layout Itemize
OpenCL
\end_layout

\begin_layout Itemize
DirectX (Microsoft Windows)
\end_layout

\begin_layout Standard
Neben proprietären GPU-Schnittstellen wie CUDA und DirectX, sind OpenGL
 und zunehmend auch OpenCL als hard- und betriebssystemunabhängige Standards
 verbreitet.
\end_layout

\begin_layout Standard
NVIDIA bietet mit dem CUDA-Software-Development-Kit 
\begin_inset CommandInset citation
LatexCommand citep
key "CUDA"

\end_inset

 eine Reihe von Demo-Applikationen an, die auch einige Partikelsysteme mit
 GPU-Berechnung umfassen (Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig:NvidiaPart"

\end_inset

).
 Darunter ist eine Art zweidimensionaler Wasssersimulation 
\emph on
fluidsGL
\emph default
, eine Galaxie-Simulation mit komplexeren Gravitationsmodell 
\emph on
nbody
\emph default
 und eine allgemeine Partikelsimulation 
\emph on
particles
\emph default
.
 Letztere lässt die Partikelparameter (siehe Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Partikelparameter"

\end_inset

) frei einstellen und (interaktiv) deren Einfluss erkennen.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/cuda_fluidsGL.png
	lyxscale 10
	height 17theight%

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/cuda_nbody.png
	lyxscale 10
	height 17theight%

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/cuda_particles.png
	lyxscale 10
	height 17theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Von links nach rechts: 2D-Wassersimulation, 3D-Galaxysimulation und 3D-Partikels
imulation 
\begin_inset CommandInset citation
LatexCommand citep
key "CUDA"

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:NvidiaPart"

\end_inset


\end_layout

\end_inset

 Als Entwicklungsschritt hin zu einem auf der GPU berechnetem Partikelsystem
 hat dieses Demo die Animation relative vieler Partikel (> 30.000) zu bieten.
 Im Gegensatz zu 
\emph on
Runes Partikelsystem 
\emph default
(
\begin_inset CommandInset ref
LatexCommand vpageref
reference "Par:RunePart"

\end_inset

) ist es darüber hinaus echtzeitfähig.
 Das Rendering der Partikel geschiet auf der GPU, wenn auch die Partikel-
 (Positions-) Berechnung auf der CPU stattfindet.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO Referenz
\end_layout

\end_inset

 Bedarf es einer größeren Anzahl an Partikeln (> 100.000) müssen sehr viele
 Partikeldaten über den Bus von CPU zu GPU transportiert werden.
 Die Animation ist dann busgegrenzt.
\end_layout

\begin_layout Standard
Die Anforderung an ein Partikelsystem mit einer solchen Anzahl von Partikeln
 ist die Berechnung auch der Partikelpositionen und somit der kompletten
 Animation auf der GPU um (fast) jeglichen Bus-Transfer zwischen CPU und
 GPU zu vermeiden.
\end_layout

\begin_layout Section
UberFlow-Partikelsystem
\end_layout

\begin_layout Subsection
Überblick
\begin_inset CommandInset label
LatexCommand label
name "sub:Ueberblick"

\end_inset


\end_layout

\begin_layout Standard
Das UberFlow-Partikelsystem 
\begin_inset CommandInset citation
LatexCommand citep
key "Kipfer:2004fk"

\end_inset

 wurde mit dem Ziel entwickelt eine sehr große Anzahl von Partikeln (>100.000)
 in Echtzeit zu berechnen.
 Die Realisierung erfolgte in einer reinen GPU-Implementierung aller Algorithmen
 um jegliche Bus-Belastung durch Daten-Transfers zu vermeiden.
\end_layout

\begin_layout Standard
Als GPU-Schnittstelle wurde OpenGL verwendet.
 In dessen aktuellen Standards bietet es das sogenannte 
\emph on
Pixelshader 3.0
\emph default
 -Modell an.
 Dabei werden den Shadern (parallele GPU-Programme) Speicherobjekte zu beliebige
m Einsatz (also nicht nur zum Rendern) angeboten.
 Das ermöglicht eine flexible Programmierung nach dem Vorbild von CPU-(Host)-Pro
grammen.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Forward-Reference
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Priorität liegt auf der korrekten grafischen Darstellung der Partikel und
 der Kollisionserkennung.
 Die Berechnungen sind optimiert für Umgebungen mit Heightmaps.
\end_layout

\begin_layout Subsection
Anwendung
\end_layout

\begin_layout Standard
Die Kombination aus dem verwendeten Bewegungsmodell und der riesigen Anzahl
 an darstellbaren Partikeln eignet sich sehr gut für Strömungssimulationen,
 wie in Abbildungen 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "Fig:AnwStroem1"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "Fig:AnwStroem2"

\end_inset

 gezeigt.
 Dabei können sämtliche Simulationsparameter in echtzeit geändert und deren
 Einfluss gezeigt werden.
 Unterschiedliche Darstellungen der Partikel sind möglich.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/Examp_cluster.jpg
	lyxscale 15
	height 22theight%

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/WindtunnelRibbons.jpg
	lyxscale 20
	height 22theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Strömungssimulation, rechts Darstellung der Partikel als 
\emph on
Ribbons
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Kipfer:2004fk"

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:AnwStroem1"

\end_inset


\end_layout

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/Windtunnel1.jpg
	lyxscale 25
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Strömungssimulation 2: Partikeldarstellung mit einzelnen Punkten 
\begin_inset CommandInset citation
LatexCommand cite
key "Kipfer:2004fk"

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:AnwStroem2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Alles mit Texturen
\end_layout

\begin_layout Standard
Um das Potential von modernen GPUs auszunutzen reicht es nicht aus existierende
 CPU-Algorithmen zu portieren.
 Die Shadereinheiten auf GPUs sind optimiert um Daten zu verarbeiten, die
 als Textur vorliegen.
\end_layout

\begin_layout Standard
Im Uberflow-Partikelsystem werden alle Partikelpositionen in einer zweidimension
alen RGBA-Textur gespeichert.
 Die Anfangsposition 
\begin_inset Formula $r(t)$
\end_inset

 kann dabei zufällig oder geordnet festgelegt werden.
 Jede Koordinate der 
\begin_inset Formula $n\; x\; n$
\end_inset

-Dimensions-Textur enthält einen vierdimensionalen Vektor um die räumlichen
 Koordinaten und den Zeitstempel eines Partikels zu speichern (Gleichung
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:PartVek"

\end_inset

).
 Der Zeitstempel wird während der Animation benutzt um zu überpüfen, ob
 das Partikel schon sichtbar sein soll bzw.
 seine Lebensdauer schon überschritten hat.
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula \begin{equation}
\left(\begin{array}{c}
R\\
G\\
B\\
A\end{array}\right)^{n\; x\; n}=r(t)^{n\; x\; n}=\left(\begin{array}{c}
x\\
y\\
z\\
t\end{array}\right)^{n\; x\; n}\label{eq:PartVek}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Das in Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Ueberblick"

\end_inset

 erwähnte Pixelshader 3.0-Modell ermöglicht es Speicherbereiche (sogenannte
 
\emph on
Memory Objects, MO
\emph default
) für beliebige Daten anzufordern.
 Shaderprogramme können so Eingabedaten als MO bekommen um neue Daten in
 einem MO zu speichern, dass wieder als Eingabe für ein anderes Progamm
 benutzt wird.
 Diese Speicherbereiche können in 
\begin_inset Quotes gld
\end_inset

unsichtbare
\begin_inset Quotes grd
\end_inset

 bereiche des Grafikspeichers gespeichert werden, wenn sie nicht zum Rendern
 vorgesehen sind.
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig:MemoryObject"

\end_inset

 stellt das schematisch dar.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset External
	template XFig
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/MemoryObjects.fig
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
OpenGL: Memory Objects
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:MemoryObject"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sortierung
\end_layout

\begin_layout Standard
Die Sortierung der Partikel ist das Schlüsselelement für die korrekte Darstellun
g der Partikel in der Rendering-Phase.
 Zum Einen müssen Partikel nach ihrem Abstand zueinander sortier werden
 um Kollisionnen zu erkennen 
\begin_inset Formula $(1)$
\end_inset

, zum Anderen muss für eine (halb-)transparente Darstellung von Partikeln
 die Entfernung dieser zum Betrachter berücksichtigt werden 
\begin_inset Formula $(2)$
\end_inset

.
\end_layout

\begin_layout Standard
Diese zwei Eigenschaften des UberFlow-Systems sind voneinander unabhängig
 und können während der Animation zu- oder abgeschaltet werden.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Erwähne performance-unterschied in der zusammenfassung
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Für Methode 1 wird der dreidimensionale Raum in ein quatratisches Gitter
 mit der Kantenlänge 
\begin_inset Formula $g_{0}$
\end_inset

 unterteilt.
 Der Sortierschlüssel für jedes Partikel berechnet sich nach 
\begin_inset Formula $x/g_{0}^{2}+y/g_{0}+z$
\end_inset

.
 Zusätzlich werd einem Partikel der Index der Gitterzelle, die ihn einschließt
 zugeordnet.
\end_layout

\begin_layout Itemize
Methode 2 speichert als Sortierschlüssel den Abstand des Partikels zum Betrachte
r.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset External
	template XFig
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/Sorting.fig
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sortierung
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:Sortierung"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
Kollisionserkennung
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/collision_b.png
	lyxscale 25
	height 25theight%

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename /Users/sebastian/Documents/_Master/Hamburg/_SS10/_ComputerGraphic/_Seminar/media/collision.jpg
	lyxscale 25
	height 25theight%

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Ohne (links) und mit (rechtes) Kollisionserkennung
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig:KollisionVergl"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Zusammenfassung
\end_layout

\begin_layout Standard
\start_of_appendix
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "particlesystem"
options "bibtotoc,alphadin"

\end_inset


\end_layout

\end_body
\end_document
